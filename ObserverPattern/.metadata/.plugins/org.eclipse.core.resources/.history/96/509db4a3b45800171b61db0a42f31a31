package com.example;
/**
 * 一旦自己观察的对象发生了变化，自己立刻要行动起来
 * @author Still2Almost
 *
 */
public class Lisi implements ILisi{
	//首先李斯是个观察者，一旦韩非子有活动，他就直到，他就要向老板报告
	@Override
	public void update(String context) {
		System.out.println("李斯：观测到韩非的活动，开始向老板报告");
		this.reportToinshihuang(context);
		System.out.println("李斯：报告完毕");
	}
	//汇报给秦始皇
	private void reportToinshihuang(String reportContext){
		System.out.println("李斯:报告老板，韩非子有活动了------->"
				+ reportContext);
	}

}
//间谍
class Spy extends Thread{
	private HanFeiZi hanFeiZi;
	private Lisi lisi;
	private String type;
	//通过构造函数传递参数，我要监控的是谁，谁要监控，要监控什么
	public Spy(HanFeiZi hanFeiZi, Lisi lisi, String type) {
		this.hanFeiZi = hanFeiZi;
		this.lisi = lisi;
		this.type = type;
	}
	@Override
	public void run(){
		while (true) {
			//监控是否在在吃早饭
			if(this.type.equals("break")){
				//如果发现韩非子在吃早饭，就通知李斯
				if(this.hanFeiZi.isHavingBreakfast()){
					this.lisi.update("韩非子在吃早饭");
					//重置状态
					this.hanFeiZi.setHavingBreakfast(false);
				}
			}
		}
	}
}
