1.罪恶的成绩单
2.装饰模式的定义
	动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式相比生成子类更为灵活
	Component抽象构件：
		Component是一个接口或者抽象类，就是定义我们最核心的对象，也就是原始对象，比如生成绩单
	ConcreteComponent具体构件：
		是最核心，最原始，最基本的接口或抽象类的实现，你要装饰的就是它
	Decorator：装饰角色
		一般是一个抽象类：
			实现接口或者抽象方法，它里面可不一定有抽象的方法
			在它的属性必然有一个Private变量指向Component抽象构件
	具体装饰角色
		ConcreteComponentA和ConcreteComponnetB是两个具体的装饰类，
		你要把你最核心的，最原始的，最基本的东西装饰成其他东西，
3.装饰模式的应用
	3.1.装饰默契的优点
		装饰类和被装饰类可以独立发展，而不会相互耦合，换句话说
		  Component类无须直到Decorator类，
		  Decorator类是从外部来扩展Component类的功能
		  而Decorator也不用直到具体的构件
		装饰模式是继承关系的一个替代方案
		  我们看装饰类Decorator，不管装饰多少层，返回的对象还是Component，实现的还是is-a的关系
		装饰模式可以动态地扩展一个实现类的功能，
	3.2.装饰模式的缺点
		多层装饰比较负载。
	3.3.装饰模式使用的场景
		需要扩展一个类的功能，或给一个类附加增加功能呢
		需要动态的给一个对象增加功能，这些功能可以再动态的撤销
		需要为一批的兄弟类进行改装或加装功能，首选装饰模式
		